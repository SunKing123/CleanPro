package com.xiaoniu.cleanking.bean.weatherdao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.xiaoniu.cleanking.ui.main.bean.weatherdao.WeatherCity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "XNWeatherCityModel".
*/
public class WeatherCityDao extends AbstractDao<WeatherCity, Long> {

    public static final String TABLENAME = "XNWeatherCityModel";

    /**
     * Properties of entity WeatherCity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "id");
        public final static Property Country = new Property(1, String.class, "country", false, "country");
        public final static Property Province = new Property(2, String.class, "province", false, "province");
        public final static Property City = new Property(3, String.class, "city", false, "city");
        public final static Property District = new Property(4, String.class, "district", false, "district");
        public final static Property AreaCode = new Property(5, String.class, "areaCode", false, "area_code");
        public final static Property Longitude = new Property(6, String.class, "longitude", false, "longitude");
        public final static Property Latitude = new Property(7, String.class, "latitude", false, "latitude");
        public final static Property CityType = new Property(8, int.class, "cityType", false, "city_type");
        public final static Property PinyinDistrict = new Property(9, String.class, "pinyinDistrict", false, "pinyin_district");
        public final static Property RecommendCity = new Property(10, int.class, "recommendCity", false, "recommendCity");
        public final static Property IsRecommend = new Property(11, int.class, "isRecommend", false, "isRecommend");
        public final static Property IsSelected = new Property(12, int.class, "isSelected", false, "isSelected");
        public final static Property IsPositioning = new Property(13, int.class, "isPositioning", false, "isPositioning");
        public final static Property IsDefalut = new Property(14, int.class, "isDefalut", false, "isDefalut");
    }


    public WeatherCityDao(DaoConfig config) {
        super(config);
    }
    
    public WeatherCityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WeatherCity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String country = entity.getCountry();
        if (country != null) {
            stmt.bindString(2, country);
        }
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(3, province);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(4, city);
        }
 
        String district = entity.getDistrict();
        if (district != null) {
            stmt.bindString(5, district);
        }
        stmt.bindString(6, entity.getAreaCode());
 
        String longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindString(7, longitude);
        }
 
        String latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindString(8, latitude);
        }
        stmt.bindLong(9, entity.getCityType());
 
        String pinyinDistrict = entity.getPinyinDistrict();
        if (pinyinDistrict != null) {
            stmt.bindString(10, pinyinDistrict);
        }
        stmt.bindLong(11, entity.getRecommendCity());
        stmt.bindLong(12, entity.getIsRecommend());
        stmt.bindLong(13, entity.getIsSelected());
        stmt.bindLong(14, entity.getIsPositioning());
        stmt.bindLong(15, entity.getIsDefalut());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WeatherCity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String country = entity.getCountry();
        if (country != null) {
            stmt.bindString(2, country);
        }
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(3, province);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(4, city);
        }
 
        String district = entity.getDistrict();
        if (district != null) {
            stmt.bindString(5, district);
        }
        stmt.bindString(6, entity.getAreaCode());
 
        String longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindString(7, longitude);
        }
 
        String latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindString(8, latitude);
        }
        stmt.bindLong(9, entity.getCityType());
 
        String pinyinDistrict = entity.getPinyinDistrict();
        if (pinyinDistrict != null) {
            stmt.bindString(10, pinyinDistrict);
        }
        stmt.bindLong(11, entity.getRecommendCity());
        stmt.bindLong(12, entity.getIsRecommend());
        stmt.bindLong(13, entity.getIsSelected());
        stmt.bindLong(14, entity.getIsPositioning());
        stmt.bindLong(15, entity.getIsDefalut());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public WeatherCity readEntity(Cursor cursor, int offset) {
        WeatherCity entity = new WeatherCity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // country
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // province
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // city
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // district
            cursor.getString(offset + 5), // areaCode
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // longitude
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // latitude
            cursor.getInt(offset + 8), // cityType
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // pinyinDistrict
            cursor.getInt(offset + 10), // recommendCity
            cursor.getInt(offset + 11), // isRecommend
            cursor.getInt(offset + 12), // isSelected
            cursor.getInt(offset + 13), // isPositioning
            cursor.getInt(offset + 14) // isDefalut
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WeatherCity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCountry(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setProvince(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCity(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDistrict(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAreaCode(cursor.getString(offset + 5));
        entity.setLongitude(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLatitude(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCityType(cursor.getInt(offset + 8));
        entity.setPinyinDistrict(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setRecommendCity(cursor.getInt(offset + 10));
        entity.setIsRecommend(cursor.getInt(offset + 11));
        entity.setIsSelected(cursor.getInt(offset + 12));
        entity.setIsPositioning(cursor.getInt(offset + 13));
        entity.setIsDefalut(cursor.getInt(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(WeatherCity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(WeatherCity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(WeatherCity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
